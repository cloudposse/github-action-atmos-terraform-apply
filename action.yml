name: 'GitHub Action Atmos Terraform Apply'
description: 'GitHub Action Atmos Terraform Apply'
author: hello@cloudposse.com
branding:
  icon: 'server'
  color: 'white'
inputs:
  component:
    description: "The name of the component to apply."
    required: true
  stack:
    description: "The stack name for the given component."
    required: true
  sha:
    description: "Commit SHA to apply. Default: github.sha"
    required: true
    default: "${{ github.event.pull_request.head.sha }}"
  atmos-version:
    description: The version of atmos to install
    required: false
    default: ">= 1.63.0"
  atmos-config-path:
    description: The path to the atmos.yaml file
    required: true
  infracost-api-key:
    description: "Infracost API key"
    required: false
  branding-logo-image:
    description: "Branding logo image url"
    required: false
    default: "https://cloudposse.com/logo-300x69.svg"
  branding-logo-url:
    description: "Branding logo url"
    required: false
    default: "https://cloudposse.com/"
  debug:
    description: "Enable action debug mode. Default: 'false'"
    default: 'false'
    required: false
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
outputs:
  status:
    description: Apply Status. Either 'succeeded' or 'failed'
    value: ${{ steps.apply.outputs.status }}

runs:
  using: "composite"
  steps:
    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Checkout
      uses: actions/checkout@v4

    - name: Set atmos cli config path vars
      shell: bash
      run: |-
        echo "ATMOS_CLI_CONFIG_PATH=$(realpath ${{ inputs.atmos-config-path }})" >> $GITHUB_ENV

    - name: Install Atmos
      uses: cloudposse/github-action-setup-atmos@v2
      with:
        atmos-version: ${{ inputs.atmos-version }}
        token: ${{ inputs.token }}
        install-wrapper: false

    - name: config
      shell: bash
      id: config
      run: |-
        echo "opentofu-version=$(atmos describe config -f json | jq -r '.integrations.github.gitops["opentofu-version"]')" >> $GITHUB_OUTPUT        
        echo "terraform-version=$(atmos describe config -f json | jq -r '.integrations.github.gitops["terraform-version"]')" >> $GITHUB_OUTPUT
        echo "enable-infracost=$(atmos describe config -f json | jq -r '.integrations.github.gitops["infracost-enabled"]')" >> $GITHUB_OUTPUT        
        echo "aws-region=$(atmos describe config -f json | jq -r '.integrations.github.gitops["artifact-storage"].region')" >> $GITHUB_OUTPUT
        echo "terraform-state-role=$(atmos describe config -f json | jq -r '.integrations.github.gitops["artifact-storage"].role')" >> $GITHUB_OUTPUT
        echo "terraform-state-table=$(atmos describe config -f json | jq -r '.integrations.github.gitops["artifact-storage"].table')" >> $GITHUB_OUTPUT
        echo "terraform-state-bucket=$(atmos describe config -f json | jq -r '.integrations.github.gitops["artifact-storage"].bucket')" >> $GITHUB_OUTPUT        
        echo "terraform-plan-role=$(atmos describe config -f json | jq -r '.integrations.github.gitops.role.plan')" >> $GITHUB_OUTPUT
        echo "terraform-apply-role=$(atmos describe config -f json | jq -r '.integrations.github.gitops.role.apply')" >> $GITHUB_OUTPUT

    - name: Install Terraform
      if: ${{ steps.config.outputs.terraform-version != '' && steps.config.outputs.terraform-version != 'null' }}
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ steps.config.outputs.terraform-version }}
        terraform_wrapper: false

    - name: Install Dependencies
      uses: cloudposse-github-actions/install-gh-releases@v1
      with:
        cache: true
        config: |-
          opentofu/opentofu: 
            tag: ${{ startsWith(steps.config.outputs.opentofu-version, 'v') && steps.config.outputs.opentofu-version || format('v{0}', steps.config.outputs.opentofu-version) }}
            skip: ${{ steps.config.outputs.opentofu-version == '' || steps.config.outputs.opentofu-version == 'null' }}
          suzuki-shunsuke/tfcmt: v4.11.0
          terraform-docs/terraform-docs: v0.18.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-region: ${{ steps.config.outputs.aws-region }}
        role-to-assume: ${{ steps.config.outputs.terraform-apply-role }}
        role-session-name: "atmos-terraform-apply-gitops"
        mask-aws-account-id: "no"

    - name: Get atmos settings
      uses: cloudposse/github-action-atmos-get-setting@v1
      id: component
      with:
        settings: |
          - component: ${{ inputs.component }}
            stack: ${{ inputs.stack }}
            settingsPath: settings.github.actions_enabled
            outputPath: enabled
          - component: ${{ inputs.component }}
            stack: ${{ inputs.stack }}
            settingsPath: component_info.component_path
            outputPath: component-path
          - component: ${{ inputs.component }}
            stack: ${{ inputs.stack }}
            settingsPath: atmos_cli_config.base_path
            outputPath: base-path
          - component: ${{ inputs.component }}
            stack: ${{ inputs.stack }}
            settingsPath: command
            outputPath: command

    - name: Define Job Control State Variables
      shell: bash
      run: |
        echo "DEBUG_ENABLED=${{ inputs.debug }}" >> $GITHUB_ENV
        echo "ACTIONS_ENABLED=false" >> $GITHUB_ENV
        echo "INFRACOST_ENABLED=false" >> $GITHUB_ENV

    - name: Check If GitHub Actions is Enabled For Component
      shell: bash
      run: |
        if [[ "${{ fromJson(steps.component.outputs.settings).enabled }}" == "true" ]]; then
          echo "ACTIONS_ENABLED=true" >> $GITHUB_ENV
        else
          echo "ACTIONS_ENABLED=false" >> $GITHUB_ENV
        fi

    - name: Set atmos cli base path vars
      if: env.ACTIONS_ENABLED == 'true'
      shell: bash
      run: |-
        # Set ATMOS_BASE_PATH allow `cloudposse/utils` provider to read atmos config from the correct path 
        ATMOS_BASE_PATH="${{ fromJson(steps.component.outputs.settings).base-path }}"
        echo "ATMOS_BASE_PATH=$(realpath ${ATMOS_BASE_PATH:-./})" >> $GITHUB_ENV

    - name: Define Job Variables
      if: env.ACTIONS_ENABLED == 'true'
      id: vars
      shell: bash
      run: |
        STACK_NAME=$(echo "${{ inputs.stack }}" | sed 's#/#_#g')
        COMPONENT_PATH=$( realpath ${{ fromJson(steps.component.outputs.settings).component-path }})
        COMPONENT_NAME=$(echo "${{ inputs.component }}" | sed 's#/#_#g')
        COMPONENT_SLUG="$STACK_NAME-$COMPONENT_NAME"
        COMPONENT_CACHE_KEY=$(basename "${{ fromJson(steps.component.outputs.settings).component-path }}")
        PLAN_FILE="${COMPONENT_PATH}/$COMPONENT_SLUG-${{ inputs.sha }}.planfile"
        LOCK_FILE="${COMPONENT_PATH}/.terraform.lock.hcl"

        echo "stack_name=$STACK_NAME" >> $GITHUB_OUTPUT
        echo "component_name=$COMPONENT_NAME" >> $GITHUB_OUTPUT
        echo "component_slug=$COMPONENT_SLUG" >> $GITHUB_OUTPUT
        echo "component_path=${COMPONENT_PATH}" >> $GITHUB_OUTPUT
        echo "cache-key=${COMPONENT_CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "plan_file=$PLAN_FILE" >> $GITHUB_OUTPUT
        echo "lock_file=$LOCK_FILE" >> $GITHUB_OUTPUT

    - name: Configure State AWS Credentials
      if: env.ACTIONS_ENABLED == 'true'
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-region: ${{ steps.config.outputs.aws-region }}
        role-to-assume: ${{ steps.config.outputs.terraform-state-role }}
        role-session-name: "atmos-terraform-state-gitops"
        mask-aws-account-id: "no"

    - name: Retrieve Plan
      if: env.ACTIONS_ENABLED == 'true'
      uses: cloudposse/github-action-terraform-plan-storage@v1
      id: retrieve-plan
      continue-on-error: true
      with:
        action: getPlan
        planPath: ${{ steps.vars.outputs.plan_file }}
        commitSHA: ${{ inputs.sha }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        tableName: ${{ steps.config.outputs.terraform-state-table }}
        bucketName: ${{ steps.config.outputs.terraform-state-bucket }}

    - name: Retrieve Lockfile
      if: env.ACTIONS_ENABLED == 'true'
      uses: cloudposse/github-action-terraform-plan-storage@v1
      continue-on-error: true
      with:
        action: getPlan
        planPath: ${{ steps.vars.outputs.lock_file }}
        commitSHA: ${{ inputs.sha }}
        component: ${{ inputs.component }}
        stack: "${{ inputs.stack }}-lockfile"
        tableName: ${{ steps.config.outputs.terraform-state-table }}
        bucketName: ${{ steps.config.outputs.terraform-state-bucket }}

    - name: Configure AWS Credentials
      if: env.ACTIONS_ENABLED == 'true'
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-region: ${{ steps.config.outputs.aws-region }}
        role-to-assume: ${{ steps.config.outputs.terraform-apply-role }}
        role-session-name: "atmos-terraform-apply-gitops"
        mask-aws-account-id: "no"

    - name: Check Whether Infracost is Enabled
      if: env.ACTIONS_ENABLED == 'true'
      shell: bash
      run: |
        if [[ "${{ steps.config.outputs.enable-infracost }}" == "true" ]]; then
          echo "INFRACOST_ENABLED=true" >> $GITHUB_ENV
        else
          echo "INFRACOST_ENABLED=false" >> $GITHUB_ENV
        fi

    - name: Setup Infracost
      if: env.INFRACOST_ENABLED == 'true'
      uses: infracost/actions/setup@v3
      with:
        api-key: ${{ inputs.infracost-api-key }}

    - name: Convert PLANFILE to JSON
      if: ${{ steps.config.outputs.enable-infracost == 'true' && steps.atmos-plan.outputs.changes == 'true' }}
      shell: bash
      working-directory: ${{ steps.vars.outputs.component_path }}
      run: |
        ${{ fromJson(steps.component.outputs.settings).command }} show -json "${{ steps.vars.outputs.plan_file }}" > "${{ steps.vars.outputs.plan_file }}.json"

    - name: Generate Infracost Diff
      if: env.INFRACOST_ENABLED == 'true'
      shell: bash
      run: |
        infracost diff \
          --path="${{ steps.vars.outputs.plan_file }}.json" \
          --format=diff \
          --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
          --out-file=/tmp/infracost.txt
        infracost diff \
          --path="${{ steps.vars.outputs.plan_file }}.json" \
          --format=json \
          --project-name "${{ inputs.stack }}-${{ inputs.component }}" \
          --out-file=/tmp/infracost.json

    - name: Debug Infracost
      if: env.INFRACOST_ENABLED == 'true' && env.DEBUG_ENABLED == 'true'
      shell: bash
      run: |
        cat ${{ steps.vars.outputs.plan_file }}.json
        cat /tmp/infracost.txt
        cat /tmp/infracost.json

    - name: Set Infracost Variables
      if: env.INFRACOST_ENABLED == 'true'
      id: infracost-diff
      shell: bash
      run: |
        if [[ "${{ steps.config.outputs.enable-infracost }}" == "true" ]]; then
          INFRACOST_DIFF_TOTAL_MONTHLY_COST=$(cat /tmp/infracost.json | jq --raw-output .diffTotalMonthlyCost)
          INFRACOST_DETAILS_DIFF_BREAKDOWN="$(cat /tmp/infracost.txt | base64 --wrap 0)"
        else
          INFRACOST_DIFF_TOTAL_MONTHLY_COST="0"
          INFRACOST_DETAILS_DIFF_BREAKDOWN=""
        fi

        echo "infracost_details_diff_breakdown=$INFRACOST_DETAILS_DIFF_BREAKDOWN" >> "$GITHUB_OUTPUT"
        echo "infracost_diff_total_monthly_cost=$INFRACOST_DIFF_TOTAL_MONTHLY_COST" >> "$GITHUB_OUTPUT"

    - name: Cache .terraform
      id: cache
      uses: actions/cache@v4
      if: ${{ fromJson(steps.component.outputs.settings).enabled }}
      with:
        path: |
          ${{ steps.vars.outputs.component_path }}/.terraform
        key: ${{ steps.vars.outputs.cache-key }}

    - name: Terraform Apply
      if: env.ACTIONS_ENABLED == 'true'
      id: apply
      shell: bash
      working-directory: ${{ steps.vars.outputs.component_path }}
      run: |
        set +e
        
        TERRAFORM_OUTPUT_FILE="./terraform-${GITHUB_RUN_ID}-output.txt"

        tfcmt \
          --config "${{ github.action_path }}/config/atmos_github_summary.yaml" \
          -var "target:${{ inputs.stack }}-${{ inputs.component }}" \
          -var "component:${{ inputs.component }}" \
          -var "stack:${{ inputs.stack }}" \
          -var "job:${{ github.job }}" \
          -var "infracost_details_diff_breakdown:${{ steps.infracost-diff.outputs.infracost_details_diff_breakdown }}" \
          -var "infracost_total_monthly_cost:${{ steps.infracost-diff.outputs.infracost_diff_total_monthly_cost }}" \
          -var "logoImage:${{ inputs.branding-logo-image }}" \
          -var "logoUrl:${{ inputs.branding-logo-url }}" \
          --output "${{ github.workspace }}/atmos-apply-summary.md" \
          --log-level $([[ "${{ inputs.debug }}" == "true" ]] && echo "DEBUG" || echo "INFO") \
          apply -- \
            atmos terraform apply ${{ inputs.component }} \
            --stack ${{ inputs.stack }} \
            -auto-approve \
            -input=false \
            -no-color \
        &> ${TERRAFORM_OUTPUT_FILE}
        
        TERRAFORM_RESULT=$?

        set -e
                
        cat "${TERRAFORM_OUTPUT_FILE}"
        atmos terraform output ${{ inputs.component }} --stack ${{ inputs.stack }} --skip-init -- -json 1> output_values.json        
        terraform-docs -c ${{ github.action_path }}/config/tfdocs-config.yaml --output-file ${{ github.workspace }}/atmos-apply-summary.md ./
        
        sed -i "s#\`<sensitive>\`#![Sensitive](https://img.shields.io/badge/sensitive-c40000?style=for-the-badge)#g" ${{ github.workspace }}/atmos-apply-summary.md
        sed -i "s#\`\"#\`#g" ${{ github.workspace }}/atmos-apply-summary.md
        sed -i "s#\"\`#\`#g" ${{ github.workspace }}/atmos-apply-summary.md
        sed -i "s#|--#|:-#g" ${{ github.workspace }}/atmos-apply-summary.md
        
        cat "${{ github.workspace }}/atmos-apply-summary.md" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${TERRAFORM_RESULT}" == "0" ]]; then
          echo "status=succeeded" >> $GITHUB_OUTPUT
          echo "Terraform apply executed successfully"
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "Terraform apply failed"
        fi

        # Link to a job that executed this action
        echo "[Job](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> "${{ github.workspace }}/atmos-apply-summary.md"
        
        rm -f ${TERRAFORM_OUTPUT_FILE}
        
        exit $TERRAFORM_RESULT
